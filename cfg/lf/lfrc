#Configuration files should be located at:
#    os       system-wide             user-specific
#    unix     /etc/lf/lfrc            ~/.config/lf/lfrc

# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
#set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    OPENER=opener
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}
cmd Open &opener : $fx

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
%mkdir -p $var/crp

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv -bt $var/crp $fx 

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# bw's stuff
cmd fd ${{
  pick=`realpath \`fd -L|fzf\``
  [ -d "$pick" ] && cmd="cd" || cmd="select"
  lf -remote "send $id $cmd \"$pick\""
}}

cmd lexe %lexe

set scrolloff  0
set wrapscroll on
#set drawbox    on
set ratios     1:4:5
set relativenumber on

map sd  :set dirfirst!
map sD  :set dircounts!
map sR  :set relativenumber!
map sB  :set drawbox!
map sr  push :set<space>ratios<space>1:
map sn  :set dirfirst!; set sortby natural; set info
map sc  :set dirfirst!; set sortby ctime;   set info ctime

map q
map Q    quit
map a    :fd
map L    :Open
map w    $eval $bash
map w    $shell
map รง    $rp -- "$f"|xi
map ร    $bn -- "$f"|xi
map D    :trash
map E    :extract
map R    :reload
map Y    $xi :f $f
map .c   %files
map .C   !files :
map .d   %read name; mkdir -p $name
map .D   &eval $term -c lf
map .f   %read name; >$name
map .F   !file $fx
map .l   $ln -s $f $f-
map .L   :lexe
map .n   %>`d`.
map .N   %mkdir -p `d`.
map .r   $rename ${fs:-*}
map .s   %du -hd0
map .S   !clear; du -hd1
map .x   $chmod +x $f
map .y   $<$f xi
map .z   !clear; lsz $f
map ..f  :filter
map ..rs $sanitfname $fx
map ..rd $mv -b $f `d`.
map ..rD $mv -b $f `d`.`bn $f`
map ..v  $ts vidreduce $f
map ..D  :delete
map ..F  $lnk2 fin $f
map ..G  $lnk2 git $f
map ..R  $lnk2 ram $f
map ..w  $lnk2 wrk $f
map ..W  $lnk2 web $f
